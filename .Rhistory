loc <- link_recomb(loc, recomb = recomb.hg19)
}
p <- gg_scatter(loc, pcutoff = 5e-08, size = 2,
cex.axis = 1.5, cex.lab = 1.5,
showLD = F, labels = "index",
color = "#D53F1E", min.segment.length = Inf, # pass to geom_text_repel
scheme = c("#797979", "#2AA7C2", "#D54B2E"),
recomb_col = "#3C5488FF") +
theme_classic() + theme(legend.position = "none") +
labs(x = NULL) +
geom_point(data = subset(loc$data, loc$data$snp == loc$index_snp),
aes(x = pos / 1e6, y = -log10(p)),
shape = 23, size = 3,
fill = "#D54B2E", color = "black") +
theme(
axis.text.x = element_blank(), axis.ticks.x = element_blank(),
axis.line.x = element_blank(), panel.border = element_blank()
)
p
gg_scatter(loc)
?gg_scatter
loc$index_snp
loc
loc$index_snp <- NULL
p <- gg_scatter(loc, pcutoff = 5e-08, size = 2,
cex.axis = 1.5, cex.lab = 1.5,
showLD = F, labels = "index",
color = "#D53F1E", min.segment.length = Inf, # pass to geom_text_repel
scheme = c("#797979", "#2AA7C2", "#D54B2E"),
recomb_col = "#3C5488FF") +
theme_classic() + theme(legend.position = "none") +
labs(x = NULL) +
geom_point(data = subset(loc$data, loc$data$snp == loc$index_snp),
aes(x = pos / 1e6, y = -log10(p)),
shape = 23, size = 3,
fill = "#D54B2E", color = "black") +
theme(
axis.text.x = element_blank(), axis.ticks.x = element_blank(),
axis.line.x = element_blank(), panel.border = element_blank()
)
P
p
is.null(index_snp)
#' @param x_vis
#' @param index_snp
#' @param recomb
#' @param previous_bp
#' @param previous_label
#'
#' @return
#' @export
#'
#' @examples
draw_hla_loci <- function(x_vis, index_snp, recomb = F,
previous_bp = NULL, previous_label = NULL) {
# if (!index_snp %in% x_vis$snp) {
#   stop(paste("Index SNP", index_snp, "is not in x_vis$snp."))
# }
loc <- locus(x_vis, gene = NULL, labs = "snp",
ens_db = "EnsDb.Hsapiens.v75",
seqname = 6,
xrange = c(min(x_vis$pos), max(x_vis$pos)),
index_snp = index_snp # "rs117726495"
)
if (recomb == T) {
local_recomb_19 <- "/Users/leoarrow/project/ref/recombMap/hapMapRelease24CombinedRecombMap.bw"
recomb.hg19 <- import.bw(local_recomb_19)
loc <- link_recomb(loc, recomb = recomb.hg19)
}
if (is.null(index_snp)) { loc$index_snp <- NULL } # used for the last conditional analysis data
p <- gg_scatter(loc, pcutoff = 5e-08, size = 2,
cex.axis = 1.5, cex.lab = 1.5,
showLD = F, labels = "index",
color = "#D53F1E", min.segment.length = Inf, # pass to geom_text_repel
scheme = c("#797979", "#2AA7C2", "#D54B2E"),
recomb_col = "#3C5488FF") +
theme_classic() + theme(legend.position = "none") +
labs(x = NULL) +
geom_point(data = subset(loc$data, loc$data$snp == loc$index_snp),
aes(x = pos / 1e6, y = -log10(p)),
shape = 23, size = 3,
fill = "#D54B2E", color = "black") +
theme(
axis.text.x = element_blank(), axis.ticks.x = element_blank(),
axis.line.x = element_blank(), panel.border = element_blank()
)
# in locuszoomr, the recombination layer is the recombination is on the top
if (recomb == T) {
# we need to change it to the bottom
line_layer_index <- which(sapply(p$layers, function(layer) inherits(layer$geom, "GeomLine")))
if (length(line_layer_index) > 0) {
p$layers <- c(list(p$layers[[line_layer_index]]), p$layers[-line_layer_index])
}
}
# if gave `previous_bp` & `previous_label`, add a downward arrow and annotation
if (!is.null(previous_bp) && !is.null(previous_label)) {
current_max_y <- max(loc$data$logP, na.rm = TRUE)
arrow_end_y <- -log10(5e-08)
arrow_start_y <- arrow_end_y + 0.25 * current_max_y
p <- p +
geom_segment(
aes(x = previous_bp / 1e6, y = arrow_start_y,
xend = previous_bp / 1e6, yend = arrow_end_y),
arrow = arrow(length = unit(0.2, "cm")),
color = "#D53F1E",
size = 0.75
) +
annotate(
"text",
x = previous_bp / 1e6,
y = (arrow_end_y + arrow_start_y)/2,
label = paste0("Control for \n", previous_label),
color = "#D53F1E",
hjust = 1.2,
vjust = 1,
size = 4
)
}
return(p)
}
p7 <- x_loci(x7) %>% draw_hla_loci(index_snp = NULL, previous_bp = con_bp[6], previous_label = con_id[6], recomb = F)
p7
# patch all gg_scatter plots
combined_plot <- cowplot::plot_grid(p1, p2, p3, p4, p5, p6, p7,
ncol = 1,
greedy = FALSE,
align = "v")
ggsave("demo.pdf", plot = combined_plot, width = 10, height = 20)
ggsave("demo.pdf", plot = combined_plot, width = 5, height = 10)
?plot_grid
# patch all gg_scatter plots
combined_plot <- cowplot::plot_grid(p1, p2, p3, p4, p5, p6, p7, g,
rel_heights = c(1, 1, 1, 1, 1, 1, 1, 0.5),
ncol = 1,
greedy = FALSE,
align = "v")
combined_plot
# also draw a gene track for plot_grid
g <- gg_genetracks(
loc,
filter_gene_name = c("HLA-A", "HLA-B", "HLA-C",
"HLA-DPA1","HLA-DPB1",
"HLA-DQA1", "HLA-DQB1",
"HLA-DRB1")
)
# patch all gg_scatter plots
combined_plot <- cowplot::plot_grid(p1, p2, p3, p4, p5, p6, p7, g,
rel_heights = c(1, 1, 1, 1, 1, 1, 1, 0.5),
ncol = 1,
greedy = FALSE,
align = "v")
combined_plot
rasterize_plot <- function(plot) {
plot + ggforce::geom_point(data = ggplot_build(plot)$data[[1]],
aes(x = x, y = y),
alpha = 1,  # 可调节透明度
size = 1)
}
?ggforce::geom_point
??ggforce::geom_point
# patch all gg_scatter plots
pacman::p_load(cowplot, ggplot2, ggforce)
rasterize_plot <- function(plot) {
plot + ggforce::geom_point(data = ggplot_build(plot)$data[[1]],
aes(x = x, y = y),
alpha = 1,  # 可调节透明度
size = 1)
}
rasterize_plot(p1)
rasterize_plot <- function(plot) {
plot +
# 遍历所有图层，替换 geom_point 为 geom_point_rast
{
for (i in seq_along(plot$layers)) {
if (inherits(plot$layers[[i]]$geom, "GeomPoint")) {
plot$layers[[i]]$geom <- geom_point_rast(
alpha = 0.5,  # 可调节透明度
size = 1       # 可调节点的大小
)
}
}
plot
}
}
rasterize_plot(p1)
# patch all gg_scatter plots
pacman::p_load(cowplot, ggplot2, ggrastr)
rasterize_plot <- function(plot) {
plot +
# 遍历所有图层，替换 geom_point 为 geom_point_rast
{
for (i in seq_along(plot$layers)) {
if (inherits(plot$layers[[i]]$geom, "GeomPoint")) {
plot$layers[[i]]$geom <- geom_point_rast(
alpha = 0.5,  # 可调节透明度
size = 1       # 可调节点的大小
)
}
}
plot
}
}
rasterize_plot(p1)
rasterize_plot <- function(plot) {
# 创建一个新的 ggplot 对象以避免直接修改原始图
new_plot <- plot
for (i in seq_along(new_plot$layers)) {
if (inherits(new_plot$layers[[i]]$geom, "GeomPoint")) {
new_plot$layers[[i]] <- ggplot2::layer(
geom = ggrastr::geom_point_rast(
alpha = 0.5,  # 可调节透明度
size = 1       # 可调节点的大小
),
data = new_plot$layers[[i]]$data,
mapping = new_plot$layers[[i]]$mapping,
position = new_plot$layers[[i]]$position,
stat = new_plot$layers[[i]]$stat,
inherit.aes = new_plot$layers[[i]]$inherit.aes,
show.legend = new_plot$layers[[i]]$show.legend
)
}
}
return(new_plot)
}
rasterize_plot(p1)
rasterize_plot <- function(plot) {
# 遍历所有图层
for (i in seq_along(plot$layers)) {
# 检查图层是否为 GeomPoint
if (inherits(plot$layers[[i]]$geom, "GeomPoint")) {
# 替换为 geom_point_rast
plot$layers[[i]]$geom <- geom_point_rast(
alpha = 0.5,  # 可调节透明度
size = 1       # 可调节点的大小
)
# 如果有映射或其他参数，可以在此处复制或调整
}
}
return(plot)
}
rasterize_plot(p1)
rasterize_plot <- function(plot) {
# 遍历所有图层
for (i in seq_along(plot$layers)) {
# 检查图层是否为 GeomPoint
if (inherits(plot$layers[[i]]$geom, "GeomPoint")) {
# 替换为 geom_point_rast
plot$layers[[i]]$geom <- geom_point_rast(
alpha = 0.5,  # 可调节透明度
size = 1       # 可调节点的大小
)
# 如果有映射或其他参数，可以在此处复制或调整
}
}
return(plot)
}
rasterize_plot(p1)
rasterize_plot <- function(plot) {
# 遍历所有图层
for (i in seq_along(plot$layers)) {
# 检查图层是否为 GeomPoint
if (inherits(plot$layers[[i]]$geom, "GeomPoint")) {
# 获取当前图层的美学映射
aes_mapping <- plot$layers[[i]]$aes_params
# 替换为 geom_point_rast，保留原有的美学映射
plot$layers[[i]]$geom <- geom_point_rast(
aes = aes_mapping,  # 传递美学映射
alpha = 0.5,        # 可调节透明度
size = 1             # 可调节点的大小
)
}
}
return(plot)
}
rasterize_plot(p1)
rasterize_plot <- function(plot, alpha = 0.5, size = 1) {
# 遍历所有图层
for (i in seq_along(plot$layers)) {
layer <- plot$layers[[i]]
# 检查图层是否为 GeomPoint
if (inherits(layer$geom, "GeomPoint")) {
# 替换为 geom_point_rast，同时保留原有的映射和参数
plot$layers[[i]] <- ggplot2::layer(
geom = ggrastr::geom_point_rast,       # 使用 rasterized geom
mapping = layer$mapping,               # 保留原有映射
data = layer$data,                     # 保留原有数据
stat = layer$stat,                     # 保留原有统计变换
position = layer$position,             # 保留原有位置调整
show.legend = layer$show.legend,       # 保留图例设置
inherit.aes = layer$inherit.aes,       # 保留继承设置
params = c(layer$params, list(alpha = alpha, size = size))  # 添加/覆盖参数
)
}
}
return(plot)
}
rasterize_plot(p1)
p1 <- ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point() +
ggtitle("示例图1")
p1
rasterize_plot(p1)
rasterize_plot <- function(plot, alpha = 0.5, size = 1) {
# 获取主图的美学映射
main_mapping <- plot$mapping
# 遍历所有图层
for (i in seq_along(plot$layers)) {
layer <- plot$layers[[i]]
# 检查图层是否为 GeomPoint
if (inherits(layer$geom, "GeomPoint")) {
# 如果图层有自己的映射，使用它；否则使用主图的映射
if (is.null(layer$mapping)) {
layer_mapping <- main_mapping
inherit_aes <- FALSE
} else {
layer_mapping <- layer$mapping
inherit_aes <- layer$inherit.aes
}
# 替换为 geom_point_rast，同时保留原有的参数
plot$layers[[i]] <- ggplot2::layer(
geom = ggrastr::geom_point_rast,       # 使用 rasterized geom
mapping = layer_mapping,               # 保留原有映射或主图映射
data = layer$data,                     # 保留原有数据
stat = layer$stat,                     # 保留原有统计变换
position = layer$position,             # 保留原有位置调整
show.legend = layer$show.legend,       # 保留图例设置
inherit.aes = inherit_aes,             # 根据是否有单独映射设置
params = c(layer$params, list(alpha = alpha, size = size))  # 添加/覆盖参数
)
}
}
return(plot)
}
# 创建示例 ggplot 对象
p1 <- ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point() +
ggtitle("示例图1")
# 应用 rasterize_plot 函数
p1_rasterized <- rasterize_plot(p1, alpha = 0.5, size = 1)
rasterize_plot <- function(plot, alpha = 0.5, size = 1) {
# 创建一个新的 ggplot 对象，复制原始的主题和标签
new_plot <- ggplot() + plot$theme
# 复制主图的美学映射（如果有）
if (!is.null(plot$mapping)) {
new_plot <- new_plot + ggplot2::aes_string(!!!plot$mapping)
}
# 复制各个图层，替换 GeomPoint 为 geom_point_rast
for (layer in plot$layers) {
if (inherits(layer$geom, "GeomPoint")) {
# 使用 geom_point_rast 替换 geom_point
new_plot <- new_plot + ggrastr::geom_point_rast(
mapping = layer$mapping,
data = layer$data,
stat = layer$stat,
position = layer$position,
inherit.aes = layer$inherit.aes,
show.legend = layer$show.legend,
alpha = alpha,
size = size
)
} else {
# 保留其他图层不变
new_plot <- new_plot + layer
}
}
# 复制标签（如标题）
if (!is.null(plot$labels$title)) {
new_plot <- new_plot + ggplot2::ggtitle(plot$labels$title)
}
# 复制其他标签（如轴标签）
if (!is.null(plot$labels$x)) {
new_plot <- new_plot + ggplot2::xlab(plot$labels$x)
}
if (!is.null(plot$labels$y)) {
new_plot <- new_plot + ggplot2::ylab(plot$labels$y)
}
# 复制其他必要的标签和主题元素
# 根据需要添加更多的复制逻辑
return(new_plot)
}
# 创建示例 ggplot 对象
p1 <- ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point() +
ggtitle("示例图1") +
xlab("发动机排量") +
ylab("高速公路燃油效率")
# 应用 rasterize_plot 函数
p1_rasterized <- rasterize_plot(p1, alpha = 0.5, size = 1)
install.packages('ggrastr')
p1+rasterise(geom_point(), dpi = 5)
pkgs <- as.data.frame(installed.packages(), stringsAsFactors = FALSE, row.names = FALSE)
pkgs[pkgs$Package == 'Cairo', c("Package", "LibPath", "Version", "Built")]
Cairo::Cairo(type='raster'); dev.off()
Cairo::Cairo(type='raster'); dev.off()
p1+rasterise(geom_point(), dpi = 5)
p2+rasterise(geom_point(), dpi = 5)
p2+rasterise(geom_point(), dpi = 50)
p2+rasterise(geom_point(), dpi = 500)
p2+geom_point_rast(dpi = 500)
？rasterise
?rasterise
p2$layers
rasterise(p2, dpi = 500, layers = "geom_point")
combined_plot_ra <- rasterise(combined_plot, dpi = 500, layers = "geom_point")
ggsave("demo.pdf", plot = combined_plot_ra, width = 5, height = 10)
rasterise(p2, dpi = 5, layers = "geom_point")
rasterise(p2, dpi = 5, layers = "Point")
combined_plot_ra <- rasterise(combined_plot, dpi = 500, layers = "Point")
ggsave("demo.pdf", plot = combined_plot_ra, width = 5, height = 10)
combined_plot_ra
combined_plot_ra <- rasterise(combined_plot, dpi = 50, layers = "Point")
combined_plot
p1 <- rasterise(p1, dpi = 500, layers = "Point")
p2 <- rasterise(p2, dpi = 500, layers = "Point")
p3 <- rasterise(p3, dpi = 500, layers = "Point")
p4 <- rasterise(p4, dpi = 500, layers = "Point")
p5 <- rasterise(p5, dpi = 500, layers = "Point")
p6 <- rasterise(p6, dpi = 500, layers = "Point")
p7 <- rasterise(p7, dpi = 500, layers = "Point")
combined_plot <- cowplot::plot_grid(p1, p2, p3, p4, p5, p6, p7, g,
rel_heights = c(1, 1, 1, 1, 1, 1, 1, 0.5),
ncol = 1,
greedy = FALSE,
align = "v")
combined_plot
ggsave("demo.pdf", plot = combined_plot_ra, width = 5, height = 10)
p7
p7 <- rasterise(p7, dpi = 50, layers = "Point")
p7
p1 <- rasterise(p1, dpi = 50, layers = "Point")
p1 <- rasterise(p1, dpi = 50, layers = "Point")
p2 <- rasterise(p2, dpi = 50, layers = "Point")
p3 <- rasterise(p3, dpi = 50, layers = "Point")
p4 <- rasterise(p4, dpi = 50, layers = "Point")
p5 <- rasterise(p5, dpi = 50, layers = "Point")
p6 <- rasterise(p6, dpi = 50, layers = "Point")
p7 <- rasterise(p7, dpi = 50, layers = "Point")
combined_plot <- cowplot::plot_grid(p1, p2, p3, p4, p5, p6, p7, g,
rel_heights = c(1, 1, 1, 1, 1, 1, 1, 0.5),
ncol = 1,
greedy = FALSE,
align = "v")
ggsave("demo.pdf", plot = combined_plot_ra, width = 5, height = 10)
combined_plot
p7
library(patchwork)
p1+p2
p3/p2
ggsave("demo.pdf", plot = combined_plot, width = 5, height = 10)
p1 <- x_loci(x1) %>% draw_hla_loci(index_snp = con_id[1], recomb = F); p1
p2 <- x_loci(x2) %>% draw_hla_loci(index_snp = con_id[2], previous_bp = con_bp[1], previous_label = con_id[1], recomb = F)
p3 <- x_loci(x3) %>% draw_hla_loci(index_snp = con_id[3], previous_bp = con_bp[2], previous_label = con_id[2], recomb = F)
p4 <- x_loci(x4) %>% draw_hla_loci(index_snp = con_id[4], previous_bp = con_bp[3], previous_label = con_id[3], recomb = F)
p5 <- x_loci(x5) %>% draw_hla_loci(index_snp = con_id[5], previous_bp = con_bp[4], previous_label = con_id[4], recomb = F)
p6 <- x_loci(x6) %>% draw_hla_loci(index_snp = con_id[6], previous_bp = con_bp[5], previous_label = con_id[5], recomb = F)
p7 <- x_loci(x7) %>% draw_hla_loci(index_snp = NULL, previous_bp = con_bp[6], previous_label = con_id[6], recomb = F)
p1 <- rasterise(p1, dpi = 500, layers = "Point")
p2 <- rasterise(p2, dpi = 500, layers = "Point")
p3 <- rasterise(p3, dpi = 500, layers = "Point")
p4 <- rasterise(p4, dpi = 500, layers = "Point")
p5 <- rasterise(p5, dpi = 500, layers = "Point")
p6 <- rasterise(p6, dpi = 500, layers = "Point")
p7 <- rasterise(p7, dpi = 500, layers = "Point")
# also draw a gene track for plot_grid
g <- gg_genetracks(
loc,
filter_gene_name = c("HLA-A", "HLA-B", "HLA-C",
"HLA-DPA1","HLA-DPB1",
"HLA-DQA1", "HLA-DQB1",
"HLA-DRB1")
)
combined_plot <- cowplot::plot_grid(p1, p2, p3, p4, p5, p6, p7, g,
rel_heights = c(1, 1, 1, 1, 1, 1, 1, 0.5),
ncol = 1,
align = "v")
combined_plot
ggsave("demo.pdf", plot = combined_plot, width = 5, height = 10)
# 加载必要的包
library(dplyr)
# 读取表格
data <- read.csv("/Volumes/T9/GWAS_Data_meQTL.csv")
# 添加新列 SuccessOrFail
data <- data %>%
rowwise() %>%
mutate(SuccessOrFail = ifelse(file.exists(paste0("/Volumes/T9/metabolites_westlake/", Index, ".mlma.gz")), "Success", "Fail"))
data
# 查看结果
print(head(data))
# 保存新的CSV文件
write.csv(data, "/Volumes/T9/GWAS_Data_meQTL_SuccessOrFail", row.names = FALSE)
# 保存新的CSV文件
write.csv(data, "/Volumes/T9/GWAS_Data_meQTL_SuccessOrFail.csv", row.names = FALSE)
table(data$SuccessOrFail)
# update function information
devtools::document()
# wrap the package
devtools::build()
# git bash
getwd()
# git bash
system(paste("cd", getwd())
)
system("
git add .
git commit -m '20141018: update a few basic functions.'
git push -u origin main
git push
")
# how to install for others ----
devtools::install_github("laleoarrow/leo.gwas")
library(leo.gwas)
detach("package:leo.gwas", unload = TRUE)
