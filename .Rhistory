)
gene_symbols_df <- tibble(GeneName = gene_symbols, OtherInformation = c(1,2,3))
map_using_bioconductor(genes = gene_symbols_df, gene_col = "GeneName" , genome = "hg19")
#' @importFrom rtracklayer import
#' @examples
#' \dontrun{
#' gene_symbols <- c("TP53", "BRCA1", "EGFR")
#' map_using_gtf(genes = gene_symbols, genome = "hg38")
#'
#' gene_symbols_df <- tibble(GeneName = gene_symbols, OtherInformation = c(1,2,3))
#' map_using_gtf(genes = gene_symbols_df, gene_col = "GeneName" , genome = "hg19")
#' }
#' @export
map_using_gtf <- function(genes, gene_col = NULL, genome = c("hg19", "hg38"), gtf_file = NULL, download_dir = "~/project/ref/gtf") {
genome <- match.arg(genome)
# Process input genes
if (is.data.frame(genes)) {
if (is.null(gene_col) || !(gene_col %in% colnames(genes))) {
stop("Please specify a valid 'gene_col' that exists in the data frame.")
}
gene_col_sym <- rlang::sym(gene_col)
gene_symbols <- genes %>% dplyr::pull(!!gene_col_sym)
input_df <- genes
} else if (is.vector(genes)) {
gene_symbols <- genes
input_df <- data.frame(gene_symbol = gene_symbols, stringsAsFactors = FALSE)
} else {
stop("Input 'genes' must be a vector or a data frame.")
}
# Set default download directory
if (is.null(download_dir)) { download_dir <- "~/project/ref/gtf" }
if (!dir.exists(download_dir)) { dir.create(download_dir, recursive = TRUE) }
message(paste0(">>> Setting the download_dir: ", download_dir, "\n"))
# Download GTF file if not provided
if (is.null(gtf_file)) {
if (genome == "hg19") {
# gtf_url <- "ftp://ftp.ensembl.org/pub/grch37/current/gtf/homo_sapiens/Homo_sapiens.GRCh37.87.gtf.gz"
gtf_url <- "https://ftp.ncbi.nlm.nih.gov/refseq/H_sapiens/annotation/GRCh37_latest/refseq_identifiers/GRCh37_latest_genomic.gtf.gz"
gtf_file <- file.path(download_dir, basename(gtf_url))
} else if (genome == "hg38") {
# gtf_url <- "ftp://ftp.ensembl.org/pub/release-108/gtf/homo_sapiens/Homo_sapiens.GRCh38.108.gtf.gz"
gtf_url <- "https://ftp.ncbi.nlm.nih.gov/refseq/H_sapiens/annotation/GRCh38_latest/refseq_identifiers/GRCh38_latest_genomic.gtf.gz"
gtf_file <- file.path(download_dir, basename(gtf_url))
}
if (!file.exists(gtf_file)) {
message("Downloading GTF file...")
utils::download.file(gtf_url, destfile = gtf_file)
}
}
# Create TxDb object from GTF file
message("Creating TxDb object from GTF file...")
txdb <- suppressMessages( GenomicFeatures::makeTxDbFromGFF(gtf_file, format = "gtf") )
# Retrieve gene locations
gene_locations <- GenomicFeatures::genes(txdb)
gene_locations_df <- as.data.frame(gene_locations)
# Import GTF file to get gene symbols
message("Importing GTF file to get gene symbols...")
gtf_data <- rtracklayer::import(gtf_file)
# Determine available attribute columns
available_cols <- names(S4Vectors::mcols(gtf_data))
if ("gene_name" %in% available_cols) {
gene_id_col <- "gene_id"
gene_name_col <- "gene_name"
} else if ("gene" %in% available_cols) {
gene_id_col <- "gene_id"
gene_name_col <- "gene"
} else {
stop("Neither 'gene_name' nor 'gene' columns are present in the GTF file.")
}
gene_symbols_map <- unique(S4Vectors::mcols(gtf_data)[, c(gene_id_col, gene_name_col)])
colnames(gene_symbols_map) <- c("gene_id", "gene_name")
gene_symbols_map <- as.data.frame(gene_symbols_map)
# Merge gene locations with gene symbols
gene_locations_df <- gene_locations_df %>%
dplyr::left_join(gene_symbols_map, by = c("gene_id"))
# Filter for input gene symbols
result_df <- gene_locations_df %>%
dplyr::filter(gene_name %in% gene_symbols) %>%
dplyr::select(gene_symbol = gene_name, chr = seqnames, bp_start = start, bp_end = end, strand)
# Clean up chromosome names and strand
result_df <- result_df %>%
dplyr::mutate(
chr = sub("^NC_0*([0-9XYMT]+)\\..*$", "\\1", chr)
)
# If input was a data frame, append the results
if (is.data.frame(genes)) {
final_df <- genes %>%
dplyr::left_join(result_df, by = stats::setNames("gene_symbol", gene_col))
return(final_df)
} else {
return(result_df)
}
}
map_using_gtf(genes = gene_symbols_df, gene_col = "GeneName" , genome = "hg19")
map_using_bioconductor(genes = gene_symbols_df, gene_col = "GeneName" , genome = "hg19")
gene_symbols_df <- data.frame(GeneName = gene_symbols, OtherInformation = c(1,2,3))
gene_symbols_df
map_using_bioconductor(genes = gene_symbols_df, gene_col = "GeneName" , genome = "hg19")
gene_symbols <- c("TP53", "BRCA1", "EGFR")
result <- leo_map_gene_to_chrbp(
genes = gene_symbols,
method = "bioconductor",
genome = "hg19"
)
#' )
#' result <- leo_map_gene_to_chrbp(
#'   genes = df,
#'   gene_col = "gene_name",
#'   method = "gtf",
#'   genome = "hg38"
#' )
#' print(result)
#' }
#' @export
leo_map_gene_to_chrbp <- function(genes,
gene_col = NULL,
method = c("bioconductor", "gtf"),
genome = c("hg19", "hg38"),
gtf_file = NULL) {
method <- match.arg(method)
genome <- match.arg(genome)
if (method == "bioconductor") {
result <- map_using_bioconductor(genes = genes, gene_col = gene_col, genome = genome)
} else if (method == "gtf") {
result <- map_using_gtf(genes = genes, gene_col = gene_col, genome = genome, gtf_file = gtf_file)
} else {
stop("Invalid method specified.")
}
return(result)
}
result <- leo_map_gene_to_chrbp(
genes = gene_symbols,
method = "bioconductor",
genome = "hg19"
)
result
#' @return A data frame with columns: gene_symbol, chr, bp_start, bp_end, strand.
#' @importFrom dplyr %>% select mutate left_join filter pull
#' @importFrom rlang sym
#' @examples
#' \dontrun{
#' \dontrun{
#' # Using Bioconductor method with a character vector of gene symbols
#' leo_map_gene_to_chrbp(genes = c("TP53", "BRCA1", "EGFR"), method = "bioconductor", genome = "hg19")
#'
#' # Using Bioconductor method with a data frame
leo_map_gene_to_chrbp(genes = data.frame(gene_name = c("TP53", "BRCA1", "EGFR"), value = c(1.2, 3.4, 5.6)),
gene_col = "gene_name", method = "bioconductor", genome = "hg19")
#' leo_map_gene_to_chrbp(genes = c("TP53", "BRCA1", "EGFR"), method = "bioconductor", genome = "hg19")
#'
#' # Using Bioconductor method with a data frame
#' leo_map_gene_to_chrbp(genes = data.frame(gene_name = c("TP53", "BRCA1", "EGFR"), value = c(1.2, 3.4, 5.6)),
#'                       gene_col = "gene_name", method = "bioconductor", genome = "hg19")
#'
#' # Using GTF method with a character vector of gene symbols
#' leo_map_gene_to_chrbp(genes = c("TP53", "BRCA1", "EGFR"), method = "gtf", genome = "hg38")
#'
#' # Using GTF method with a data frame
leo_map_gene_to_chrbp(genes = data.frame(gene_name = c("TP53", "BRCA1", "EGFR"), value = c(1.2, 3.4, 5.6)),
gene_col = "gene_name", method = "gtf", genome = "hg38")
gene_col = "gene_name", method = "gtf", genome = "hg38", download_dir = "~/project/ref/gtf")
leo_map_gene_to_chrbp(genes = data.frame(gene_name = c("TP53", "BRCA1", "EGFR"), value = c(1.2, 3.4, 5.6)),
gene_col = "gene_name", method = "gtf", genome = "hg38", download_dir = "~/project/ref/gtf")
#' }
#' @export
leo_map_gene_to_chrbp <- function(genes,
gene_col = NULL,
method = c("bioconductor", "gtf"),
genome = c("hg19", "hg38"),
...) {
method <- match.arg(method)
genome <- match.arg(genome)
if (method == "bioconductor") {
result <- map_using_bioconductor(genes = genes, gene_col = gene_col, genome = genome)
} else if (method == "gtf") {
result <- map_using_gtf(genes = genes, gene_col = gene_col, genome = genome, ...)
} else {
stop("Invalid method specified.")
}
return(result)
}
#' leo_map_gene_to_chrbp(genes = c("TP53", "BRCA1", "EGFR"), method = "bioconductor", genome = "hg19")
#'
#' # Using Bioconductor method with a data frame
#' leo_map_gene_to_chrbp(genes = data.frame(gene_name = c("TP53", "BRCA1", "EGFR"), value = c(1.2, 3.4, 5.6)),
#'                       gene_col = "gene_name", method = "bioconductor", genome = "hg19")
#'
#' # Using GTF method with a character vector of gene symbols
#' leo_map_gene_to_chrbp(genes = c("TP53", "BRCA1", "EGFR"), method = "gtf", genome = "hg38")
#'
#' # Using GTF method with a data frame
leo_map_gene_to_chrbp(genes = data.frame(gene_name = c("TP53", "BRCA1", "EGFR"), value = c(1.2, 3.4, 5.6)),
#' }
#' @export
leo_map_gene_to_chrbp <- function(genes,
gene_col = NULL,
method = c("bioconductor", "gtf"),
genome = c("hg19", "hg38"),
...) {
method <- match.arg(method)
genome <- match.arg(genome)
if (method == "bioconductor") {
result <- map_using_bioconductor(genes = genes, gene_col = gene_col, genome = genome)
} else if (method == "gtf") {
result <- map_using_gtf(genes = genes, gene_col = gene_col, genome = genome, ...)
} else {
stop("Invalid method specified.")
}
return(result)
}
leo_map_gene_to_chrbp(genes = data.frame(gene_name = c("TP53", "BRCA1", "EGFR"), value = c(1.2, 3.4, 5.6)),
gene_col = "gene_name", method = "gtf", genome = "hg38", download_dir = "~/project/ref/gtf")
# update function information
devtools::document()
txdb <- suppressWarnings( GenomicFeatures::makeTxDbFromGFF(gtf_file, format = "gtf") )
gtf_file <- file.path(download_dir, basename(gtf_url))
txdb <- suppressWarnings( GenomicFeatures::makeTxDbFromGFF(gtf_file, format = "gtf") )
txdb <- suppressWarnings( GenomicFeatures::makeTxDbFromGFF(gtf_file, format = "gtf") )
# Retrieve gene locations
gene_locations <- GenomicFeatures::genes(txdb)
gene_symbols_map <- unique(S4Vectors::mcols(gtf_data)[, c(gene_id_col, gene_name_col)])
colnames(gene_symbols_map) <- c("gene_id", "gene_name")
gene_symbols_map <- as.data.frame(gene_symbols_map)
# Merge gene locations with gene symbols
gene_locations_df <- gene_locations_df %>%
dplyr::left_join(gene_symbols_map, by = c("gene_id"))
# Filter for input gene symbols
result_df <- gene_locations_df %>%
dplyr::filter(gene_name %in% gene_symbols) %>%
dplyr::select(gene_symbol = gene_name, chr = seqnames, bp_start = start, bp_end = end, strand)
# Import GTF file to get gene symbols
message("Importing GTF file to get gene symbols...")
gtf_data <- rtracklayer::import(gtf_file)
# Determine available attribute columns
available_cols <- names(S4Vectors::mcols(gtf_data))
if ("gene_name" %in% available_cols) {
gene_id_col <- "gene_id"
gene_name_col <- "gene_name"
} else if ("gene" %in% available_cols) {
gene_id_col <- "gene_id"
gene_name_col <- "gene"
} else {
stop("Neither 'gene_name' nor 'gene' columns are present in the GTF file.")
}
gene_symbols_map <- unique(S4Vectors::mcols(gtf_data)[, c(gene_id_col, gene_name_col)])
colnames(gene_symbols_map) <- c("gene_id", "gene_name")
gene_symbols_map <- as.data.frame(gene_symbols_map)
# Merge gene locations with gene symbols
gene_locations_df <- gene_locations_df %>%
dplyr::left_join(gene_symbols_map, by = c("gene_id"))
# Filter for input gene symbols
result_df <- gene_locations_df %>%
dplyr::filter(gene_name %in% gene_symbols) %>%
dplyr::select(gene_symbol = gene_name, chr = seqnames, bp_start = start, bp_end = end, strand)
# Clean up chromosome names and strand
result_df <- result_df %>%
dplyr::mutate(
chr = sub("^NC_0*([0-9XYMT]+)\\..*$", "\\1", chr)
)
# If input was a data frame, append the results
if (is.data.frame(genes)) {
final_df <- genes %>%
dplyr::left_join(result_df, by = stats::setNames("gene_symbol", gene_col))
return(final_df)
} else {
return(result_df)
}
#' @importFrom rtracklayer import
#' @examples
#' \dontrun{
#' gene_symbols <- c("TP53", "BRCA1", "EGFR")
#' map_using_gtf(genes = gene_symbols, genome = "hg38")
#'
#' gene_symbols_df <- data.frame(GeneName = gene_symbols, OtherInformation = c(1,2,3))
#' map_using_gtf(genes = gene_symbols_df, gene_col = "GeneName" , genome = "hg19")
#' }
#' @export
map_using_gtf <- function(genes, gene_col = NULL, genome = c("hg19", "hg38"), gtf_file = NULL, download_dir = "~/project/ref/gtf") {
genome <- match.arg(genome)
# Process input genes
if (is.data.frame(genes)) {
if (is.null(gene_col) || !(gene_col %in% colnames(genes))) {
stop("Please specify a valid 'gene_col' that exists in the data frame.")
}
gene_col_sym <- rlang::sym(gene_col)
gene_symbols <- genes %>% dplyr::pull(!!gene_col_sym)
input_df <- genes
} else if (is.vector(genes)) {
gene_symbols <- genes
input_df <- data.frame(gene_symbol = gene_symbols, stringsAsFactors = FALSE)
} else {
stop("Input 'genes' must be a vector or a data frame.")
}
# Set default download directory
if (is.null(download_dir)) { download_dir <- "~/project/ref/gtf" }
if (!dir.exists(download_dir)) { dir.create(download_dir, recursive = TRUE) }
message(paste0(">>> Setting the download_dir: ", download_dir, "\n"))
# Download GTF file if not provided
if (is.null(gtf_file)) {
if (genome == "hg19") {
# gtf_url <- "ftp://ftp.ensembl.org/pub/grch37/current/gtf/homo_sapiens/Homo_sapiens.GRCh37.87.gtf.gz"
gtf_url <- "https://ftp.ncbi.nlm.nih.gov/refseq/H_sapiens/annotation/GRCh37_latest/refseq_identifiers/GRCh37_latest_genomic.gtf.gz"
gtf_file <- file.path(download_dir, basename(gtf_url))
} else if (genome == "hg38") {
# gtf_url <- "ftp://ftp.ensembl.org/pub/release-108/gtf/homo_sapiens/Homo_sapiens.GRCh38.108.gtf.gz"
gtf_url <- "https://ftp.ncbi.nlm.nih.gov/refseq/H_sapiens/annotation/GRCh38_latest/refseq_identifiers/GRCh38_latest_genomic.gtf.gz"
gtf_file <- file.path(download_dir, basename(gtf_url))
}
if (!file.exists(gtf_file)) {
message("Downloading GTF file...")
utils::download.file(gtf_url, destfile = gtf_file)
}
}
# Create TxDb object from GTF file
message("Creating TxDb object from GTF file...")
txdb <- suppressWarnings( GenomicFeatures::makeTxDbFromGFF(gtf_file, format = "gtf") )
# Retrieve gene locations
gene_locations <- GenomicFeatures::genes(txdb)
gene_locations_df <- as.data.frame(gene_locations)
# Import GTF file to get gene symbols
message("Importing GTF file to get gene symbols...")
gtf_data <- rtracklayer::import(gtf_file)
# Determine available attribute columns
available_cols <- names(S4Vectors::mcols(gtf_data))
if ("gene_name" %in% available_cols) {
gene_id_col <- "gene_id"
gene_name_col <- "gene_name"
} else if ("gene" %in% available_cols) {
gene_id_col <- "gene_id"
gene_name_col <- "gene"
} else {
stop("Neither 'gene_name' nor 'gene' columns are present in the GTF file.")
}
gene_symbols_map <- unique(S4Vectors::mcols(gtf_data)[, c(gene_id_col, gene_name_col)])
colnames(gene_symbols_map) <- c("gene_id", "gene_name")
gene_symbols_map <- as.data.frame(gene_symbols_map)
# Merge gene locations with gene symbols
gene_locations_df <- gene_locations_df %>%
dplyr::left_join(gene_symbols_map, by = c("gene_id"))
# Filter for input gene symbols
result_df <- gene_locations_df %>%
dplyr::filter(gene_name %in% gene_symbols) %>%
dplyr::select(gene_symbol = gene_name, chr = seqnames, bp_start = start, bp_end = end, strand)
# Clean up chromosome names and strand
result_df <- result_df %>%
dplyr::mutate(
chr = sub("^NC_0*([0-9XYMT]+)\\..*$", "\\1", chr)
)
# If input was a data frame, append the results
if (is.data.frame(genes)) {
final_df <- genes %>%
dplyr::left_join(result_df, by = stats::setNames("gene_symbol", gene_col))
return(final_df)
} else {
return(result_df)
}
}
map_using_gtf(genes = gene_symbols_df, gene_col = "GeneName" , genome = "hg19")
gc()
# update function information
devtools::document()
# update function information
devtools::document()
usethis::use_testthat()
library(testthat)
library(leo.gwas)
test_check("leo.gwas")
#
usethis::use_git()
usethis::use_github(protocol = "ssh")
# update function information
devtools::document()
# update function information
devtools::document()
#
usethis::use_version("minor")
devtools::install_github("laleoarrow/leo.gwas")
devtools::install_github("laleoarrow/leo.gwas")
library(leo.gwas)
detach("package:leo.gwas", unload = TRUE)
# update function information
devtools::document()
devtools::install_github("laleoarrow/leo.gwas")
library(leo.gwas)
detach("package:leo.gwas", unload = TRUE)
devtools::install_github("laleoarrow/leo.gwas")
library(leo.gwas)
detach("package:leo.gwas", unload = TRUE)
# update function information
devtools::document()
devtools::install_github("laleoarrow/leo.gwas")
library(leo.gwas)
detach("package:leo.gwas", unload = TRUE)
# update function information
devtools::document()
pkgload::dev_help('map_using_bioconductor')
# how to install for others ----
devtools::install_github("laleoarrow/leo.gwas")
# how to install for others ----
devtools::install_github("laleoarrow/leo.gwas")
library(leo.gwas)
detach("package:leo.gwas", unload = TRUE)
detach("package:leo.gwas", unload = TRUE)
# how to install for others ----
devtools::install_github("laleoarrow/leo.gwas")
library(leo.gwas)
detach("package:leo.gwas", unload = TRUE)
devtools::install_github("laleoarrow/leo.gwas@v0.0.1")
df <- data.frame(chrom = c(1, 1, 2), pos = c(12345, 54321, 11111), A1 = c("A", "T", "G"), A2 = c("G", "C", "A"))
#' - A2: Reference allele/non-effect allele (It can be any in c("A2", "Allele2", "allele2", "REF", "Ref", "Non-effect"))
#' - A1: Alternative allele/effect allele (It can be any in c("A1", "Allele1", "allele1", "ALT", "Alt", "Effect"))
#' @param count_A1_A2 If T, will count the number of characters in A1 and A2
#'
#' @return A data.frame with an additional 'ID' column (if count_A1_A2=T, containing unique identifiers and character counts of A1 and A2)
#' @import dplyr
#' @examples
#' df <- data.frame(chrom = c(1, 1, 2), pos = c(12345, 54321, 11111), A1 = c("A", "T", "G"), A2 = c("G", "C", "A"))
#' get_id(df)
#' @export
get_id <- function(x, count_A1_A2 = F) {
# possible colnames for CHR and POS
chrom_cols <- c("chrom", "CHR", "Chromosome", "chromosome")
pos_cols <- c("pos", "POS", "position", "BP", "Position")
a1_cols <- c("A1", "Allele1", "allele1", "ALT", "Alt", "Effect")
a2_cols <- c("A2", "Allele2", "allele2", "REF", "Ref", "Non-effect")
chrom_col <- intersect(chrom_cols, names(x)); if(length(chrom_col) == 0){stop("No chromosome column found in the dataframe.")}
chrom_col <- chrom_col[1]
pos_col <- intersect(pos_cols, names(x)); if(length(pos_col) == 0){stop("No position column found in the dataframe.")}
pos_col <- pos_col[1]
a1_col <- intersect(a1_cols, names(x)); if(length(a1_col) == 0){stop("No A1 column found in the dataframe.")}
a1_col <- a1_col[1]
a2_col <- intersect(a2_cols, names(x)); if(length(a2_col) == 0){stop("No A2 column found in the dataframe.")}
a2_col <- a2_col[1]
if (count_A1_A2 == TRUE) {
x <- x %>%
mutate(ID = paste(.data[[chrom_col]], .data[[pos_col]], .data[[a2_col]], .data[[a1_col]], sep = ":"),
A1_n = nchar(.data[[a1_col]]),
A2_n = nchar(.data[[a2_col]]))
} else {
x <- x %>%
mutate(ID = paste(.data[[chrom_col]], .data[[pos_col]], .data[[a2_col]], .data[[a1_col]], sep = ":"))
}
return(x)
}
get_id(df)
#' - A2: Reference allele/non-effect allele (It can be any in c("A2", "Allele2", "allele2", "REF", "Ref", "Non-effect"))
#' - A1: Alternative allele/effect allele (It can be any in c("A1", "Allele1", "allele1", "ALT", "Alt", "Effect"))
#' @param count_A1_A2 If T, will count the number of characters in A1 and A2
#'
#' @return A data.frame with an additional 'ID' column (if count_A1_A2=T, containing unique identifiers and character counts of A1 and A2)
#' @import dplyr
#' @examples
#' df <- data.frame(chrom = c(1, 1, 2), pos = c(12345, 54321, 11111), A1 = c("A", "T", "G"), A2 = c("G", "C", "A"))
#' get_id(df)
#' @export
get_id <- function(x, count_A1_A2 = F) {
# possible colnames for CHR and POS
chrom_cols <- c("chrom", "CHR", "Chromosome", "chromosome")
pos_cols <- c("pos", "POS", "position", "BP", "Position")
a1_cols <- c("A1", "Allele1", "allele1", "ALT", "Alt", "Effect")
a2_cols <- c("A2", "Allele2", "allele2", "REF", "Ref", "Non-effect")
chrom_col <- intersect(chrom_cols, names(x)); if(length(chrom_col) == 0){stop("No chromosome column found in the dataframe.")}
chrom_col <- chrom_col[1]
pos_col <- intersect(pos_cols, names(x)); if(length(pos_col) == 0){stop("No position column found in the dataframe.")}
pos_col <- pos_col[1]
a1_col <- intersect(a1_cols, names(x)); if(length(a1_col) == 0){stop("No A1 column found in the dataframe.")}
a1_col <- a1_col[1]
a2_col <- intersect(a2_cols, names(x)); if(length(a2_col) == 0){stop("No A2 column found in the dataframe.")}
a2_col <- a2_col[1]
if (count_A1_A2 == TRUE) {
x <- x %>% dplyr::mutate(ID = paste(.data[[chrom_col]], .data[[pos_col]], .data[[a2_col]], .data[[a1_col]], sep = ":"),
A1_n = base::nchar(.data[[a1_col]]), A2_n = nchar(.data[[a2_col]]))
} else {
x <- x %>% dplyr::mutate(ID = paste(.data[[chrom_col]], .data[[pos_col]], .data[[a2_col]], .data[[a1_col]], sep = ":"))
}
return(x)
}
get_id(df)
requier(dplyr)
require(dplyr)
get_id(df)
get_id(df); get_id(df, count_A1_A2 = T)
# update function information
devtools::document()
# git remote add origin git@github.com:laleoarrow/leo.gwas.git
# git branch --set-upstream-to=origin/main main
# git pull --rebase origin main
system("
git add .
git commit -m '20141028: update `get_id` functions.'
git push -u origin main
git push
")
# how to install for others ----
devtools::install_github("laleoarrow/leo.gwas")
# how to install for others ----
devtools::install_github("laleoarrow/leo.gwas")
# how to install for others ----
devtools::install_github("laleoarrow/leo.gwas",force = TRUE)
library(leo.gwas)
# update function information
devtools::document()
# git remote add origin git@github.com:laleoarrow/leo.gwas.git
# git branch --set-upstream-to=origin/main main
# git pull --rebase origin main
system("
git add .
git commit -m '20141028: update `get_id` functions.'
# git push -u origin main
git push
")
system("pwd")
