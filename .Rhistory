p1 <- getwd(); message(p1)
pp <- "/Users/leoarrow/project/mypackage/leo.gwas/" # pp for package path
setwd(pp)
usethis::use_package("dplyr")
usethis::use_package("dplyr","tidyverse")
usethis::use_package("tidyverse")
usethis::use_package("tidyverse", type = "depends")
usethis::use_package("vroom")
usethis::use_package("data.table", type = "imports")
usethis::use_package("MungeSumstats", type = "imports")
# update function information
devtools::document()
devtools::load_all("/Users/leoarrow/project/mypackage/leo.gwas")
?get_id
# wrap the package
devtools::build()
devtools::install_github("laeoarrow/leo.gwas@v0.0.0")
# how to install for others ----
devtools::install_github("laleoarrow/leo.gwas")
desc$set("Description", "Layered Exploratory Omics (LEO) is a tool specifically designed for deep analysis of genomic data. It employs a multi-layered exploratory approach to help researchers uncover the complex biological information hidden behind their data.")
desc$set("Author", "Ao Lu [aut, cre] (<luao@stu.cqmu.edu.cn>)")
desc <- use_description()
desc <- devtools::use_description()
library(devtools)
desc <- devtools::use_description()
desc <- devtools::use_maintainer("Ao Lu", email = "luao@stu.cqmu.edu.cn")
use_gpl3_license()
?devtools::build()
# wrap the package
devtools::build()
# how to install for others ----
devtools::install_github("laleoarrow/leo.gwas")
# how to install for others ----
devtools::install_github("laleoarrow/leo.gwas", force = T)
devtools::install_github("laleoarrow/leo.gwas")
devtools::install_github("laleoarrow/leo.gwas")
# how to install for others ----
devtools::install_github("laleoarrow/leo.gwas")
find.package("leo.gwas")
packageDescription("leo.gwas")$Description
devtools::install_github("laleoarrow/leo.gwas")
# update function information
devtools::document()
devtools::install_github("laleoarrow/leo.gwas")
# update function information
devtools::document()
# update function information
devtools::document()
devtools::install_github("laleoarrow/leo.gwas")
library(leo.gwas)
detach("package:leo.gwas", unload = TRUE)
devtools::document()
pkgload::dev_help('get_id')
library(leo.gwas)
detach("package:leo.gwas", unload = TRUE)
devtools::document()
pkgload::dev_help('get_id')
devtools::document()
devtools::install_github("laleoarrow/leo.gwas")
devtools::install_github("laleoarrow/leo.gwas", force = T)
library(leo.gwas)
detach("package:leo.gwas", unload = TRUE)
library(leo.gwas)
detach("package:leo.gwas", unload = TRUE)
devtools::document()
devtools::install_github("laleoarrow/leo.gwas")
detach("package:leo.gwas", unload = TRUE)
library(leo.gwas)
detach("package:leo.gwas", unload = TRUE)
gc()
?str_c
#' @import SNPlocs.Hsapiens.dbSNP155.GRCh37
#' @import SNPlocs.Hsapiens.dbSNP155.GRCh38
#' @import GenomicRanges
#' @import dplyr
#' @import stringr
#' @return A dataframe with an additional 'RefSNP_id' column which contains the rsIDs.
#' @examples
#' df <- data.frame(CHR = c(1, 1), BP = c(100023, 100056))
#' result <- convert_to_rsid(df)
#' @export
convert_to_rsid <- function(dat, ref = "GRCh37") {
# Check if necessary columns are present
if (!("CHR" %in% colnames(dat)) || !("BP" %in% colnames(df))) {
stop("DataFrame must contain 'CHR' and 'BP' columns")
}
# Convert dat to data.table if it is not one already
dat <- setDT(dat)
dat[, ranges := paste0(CHR, ":", BP, "-", BP)]
# Load SNP data - assuming GRCh37, modify if using GRCh38
if (ref == "GRCh37") {
snps <- SNPlocs.Hsapiens.dbSNP155.GRCh37::SNPlocs.Hsapiens.dbSNP155.GRCh37
} else {
snps <- SNPlocs.Hsapiens.dbSNP155.GRCh38::SNPlocs.Hsapiens.dbSNP155.GRCh38
}
# Find overlaps
snp.res <- snpsByOverlaps(snps, GRanges(dat$ranges))
# Convert results to data.table
snp.res.dt <- as.data.table(snp.res)
snp.res.dt[, ranges := stringr::str_c(seqnames, ":", pos, "-", pos)]
# Merge data
trans.dat <- merge(snp.res.dt, dat, by = "ranges")
columns_to_remove <- c("strand", "alleles_as_ambig", "ranges", "seqnames", "pos")
trans.dat[, (columns_to_remove) := NULL]
# Drop NA rsid and return
# trans.dat <- trans.dat %>% drop_na(RefSNP_id)
leo_message("Remember to check if there is any NA in the RefSNP_id column.")
return(trans.dat)
}
df <- data.frame(CHR = c(1, 1), BP = c(100023, 100056))
result <- convert_to_rsid(df)
#' @import SNPlocs.Hsapiens.dbSNP155.GRCh37
#' @import SNPlocs.Hsapiens.dbSNP155.GRCh38
#' @import GenomicRanges
#' @import dplyr
#' @import stringr
#' @return A dataframe with an additional 'RefSNP_id' column which contains the rsIDs.
#' @examples
#' df <- data.frame(CHR = c(1, 1), BP = c(100023, 100056))
#' result <- convert_to_rsid(df)
#' @export
convert_to_rsid <- function(dat, ref = "GRCh37") {
# Check if necessary columns are present
if (!("CHR" %in% colnames(dat)) || !("BP" %in% colnames(df))) {
stop("DataFrame must contain 'CHR' and 'BP' columns")
}
# Convert dat to data.table if it is not one already
dat <- data.table::setDT(dat)
dat[, ranges := paste0(CHR, ":", BP, "-", BP)]
# Load SNP data - assuming GRCh37, modify if using GRCh38
if (ref == "GRCh37") {
snps <- SNPlocs.Hsapiens.dbSNP155.GRCh37::SNPlocs.Hsapiens.dbSNP155.GRCh37
} else {
snps <- SNPlocs.Hsapiens.dbSNP155.GRCh38::SNPlocs.Hsapiens.dbSNP155.GRCh38
}
# Find overlaps
snp.res <- snpsByOverlaps(snps, GRanges(dat$ranges))
# Convert results to data.table
snp.res.dt <- as.data.table(snp.res)
snp.res.dt[, ranges := stringr::str_c(seqnames, ":", pos, "-", pos)]
# Merge data
trans.dat <- merge(snp.res.dt, dat, by = "ranges")
columns_to_remove <- c("strand", "alleles_as_ambig", "ranges", "seqnames", "pos")
trans.dat[, (columns_to_remove) := NULL]
# Drop NA rsid and return
# trans.dat <- trans.dat %>% drop_na(RefSNP_id)
leo_message("Remember to check if there is any NA in the RefSNP_id column.")
return(trans.dat)
}
result <- convert_to_rsid(df)
??snpsByOverlaps
import BSgenome
p_load(data.table, BSgenome)
pacman::p_load(data.table, BSgenome)
result <- convert_to_rsid(df)
df
gc()
pacman::p_load(data.table, BSgenome, leo.gwas)
#' @import SNPlocs.Hsapiens.dbSNP155.GRCh38
#' @import BSgenome
#' @import dplyr
#' @import stringr
#' @return A dataframe with an additional 'RefSNP_id' column which contains the rsIDs.
#' @examples
#' pacman::p_load(data.table, BSgenome, leo.gwas)
#' df <- data.frame(CHR = c(1, 1), BP = c(100023, 100056))
#' result <- convert_to_rsid(df)
#' @export
convert_to_rsid <- function(dat, ref = "GRCh37") {
# Check if necessary columns are present
if (!("CHR" %in% colnames(dat)) || !("BP" %in% colnames(df))) {
stop("DataFrame must contain 'CHR' and 'BP' columns")
}
# Convert dat to data.table if it is not one already
dat <- data.table::setDT(dat)
dat[, ranges := paste0(CHR, ":", BP, "-", BP)]
# Load SNP data - assuming GRCh37, modify if using GRCh38
if (ref == "GRCh37") {
snps <- SNPlocs.Hsapiens.dbSNP155.GRCh37::SNPlocs.Hsapiens.dbSNP155.GRCh37
} else {
snps <- SNPlocs.Hsapiens.dbSNP155.GRCh38::SNPlocs.Hsapiens.dbSNP155.GRCh38
}
# Find overlaps
snp.res <- snpsByOverlaps(snps, GRanges(dat$ranges))
# Convert results to data.table
snp.res.dt <- as.data.table(snp.res)
snp.res.dt[, ranges := stringr::str_c(seqnames, ":", pos, "-", pos)]
# Merge data
trans.dat <- merge(snp.res.dt, dat, by = "ranges")
columns_to_remove <- c("strand", "alleles_as_ambig", "ranges", "seqnames", "pos")
trans.dat[, (columns_to_remove) := NULL]
# Drop NA rsid and return
# trans.dat <- trans.dat %>% drop_na(RefSNP_id)
leo_message("Remember to check if there is any NA in the RefSNP_id column.")
return(trans.dat)
}
convert_to_rsid(df)
pacman::p_load(data.table, BSgenome, leo.gwas)
?leo_message
# Drop NA rsid and return
# trans.dat <- trans.dat %>% drop_na(RefSNP_id)
leo_message("Remember to check if there is any NA in the RefSNP_id column.")
# Drop NA rsid and return
# trans.dat <- trans.dat %>% drop_na(RefSNP_id)
leo.gwas::leo_message("Remember to check if there is any NA in the RefSNP_id column.")
devtools::install_github("laleoarrow/leo.gwas")
leo.gwas::leo_message("Hi")
#' Give Messages with my color
#' @param color prefered color
#' @param msg messages to show; it should be a word pasted pharse.
#' @export
#' @examples
#' leo_message("This is a pink message")
#' leo_message("This is a green message","32")
#' leo_message("This is a blue message","34")
#' leo_message("This is a light purple message","95")
leo_message <- function(msg, color = "31") {
message(paste0("\033[", color, "m", msg, "\033[0m\n"))
}
# update function information
devtools::document()
pkgload::dev_help('leo_message')
leo_message("")
leo_message("Hi")
leo.gwas::leo_message("hi")
# load the package
devtools::load_all("/Users/leoarrow/project/mypackage/leo.gwas")
# load the package
devtools::load_all("/Users/leoarrow/project/mypackage/leo.gwas")
# Drop NA rsid and return
# trans.dat <- trans.dat %>% drop_na(RefSNP_id)
leo.gwas::leo_message("Remember to check if there is any NA in the RefSNP_id column.")
convert_to_rsid(df)
result <- convert_to_rsid(df)
result <- convert_to_rsid(df); result
result
result <- convert_to_rsid(df); result
result
df <- data.frame(CHR = c(1, 1), BP = c(100023, 100056))
result <- convert_to_rsid(df); result
result
df <- data.frame(CHR = c(1, 1), BP = c(15211, 15820))
result <- convert_to_rsid(df); result
result
#' @import SNPlocs.Hsapiens.dbSNP155.GRCh38
#' @import BSgenome
#' @import dplyr
#' @import stringr
#' @return A dataframe with an additional 'RefSNP_id' column which contains the rsIDs.
#' @examples
#' pacman::p_load(data.table, BSgenome, leo.gwas)
#' df <- data.frame(CHR = c(1, 1), BP = c(15211, 15820))
#' result <- add_rsid(df); result
#' @export
add_rsid <- function(dat, ref = "GRCh37") {
# Check if necessary columns are present
if (!("CHR" %in% colnames(dat)) || !("BP" %in% colnames(df))) {
stop("DataFrame must contain 'CHR' and 'BP' columns")
}
# Convert dat to data.table if it is not one already
dat <- data.table::setDT(dat)
dat[, ranges := paste0(CHR, ":", BP, "-", BP)]
# Load SNP data - assuming GRCh37, modify if using GRCh38
if (ref == "GRCh37") {
snps <- SNPlocs.Hsapiens.dbSNP155.GRCh37::SNPlocs.Hsapiens.dbSNP155.GRCh37
} else {
snps <- SNPlocs.Hsapiens.dbSNP155.GRCh38::SNPlocs.Hsapiens.dbSNP155.GRCh38
}
# Find overlaps
snp.res <- snpsByOverlaps(snps, GRanges(dat$ranges))
# Convert results to data.table
snp.res.dt <- as.data.table(snp.res)
snp.res.dt[, ranges := stringr::str_c(seqnames, ":", pos, "-", pos)]
# Merge data
trans.dat <- merge(snp.res.dt, dat, by = "ranges")
columns_to_remove <- c("strand", "alleles_as_ambig", "ranges", "seqnames", "pos")
trans.dat[, (columns_to_remove) := NULL]
# Drop NA rsid and return
# trans.dat <- trans.dat %>% drop_na(RefSNP_id)
leo.gwas::leo_message("Remember to check if there is any NA in the RefSNP_id column.")
return(trans.dat)
}
# update function information
devtools::document()
# wrap the package
devtools::build()
# update function information
devtools::document()
gc()
# update function information
devtools::document()
# update function information
devtools::document()
?data.table::setDT
?data.table::merge.data.table
?data.table::is.data.table
# update function information
devtools::document()
?leo.gwas::add_rsid
# Find overlaps
message("Translating RSID using \n - BSgenome::snpsByOverlaps \n - with SNPlocs.Hsapiens.dbSNP155.GRCh37")
# Find overlaps
message("Translating RSID using \n - BSgenome::snpsByOverlaps() \n - with SNPlocs.Hsapiens.dbSNP155.GRCh37")
snps <- SNPlocs.Hsapiens.dbSNP155.GRCh37::SNPlocs.Hsapiens.dbSNP155.GRCh37
snps
snps@provider_version
str(snps)
snps@data_pkgname
# Find overlaps
message(paste0("Translating RSID using: \n - BSgenome::snpsByOverlaps() \n - With ", snps@data_pkgname))
# update function information
devtools::document()
# wrap the package
devtools::build()
# update function information
devtools::document()
devtools::document()
devtools::document()
devtools::install_github("laleoarrow/leo.gwas")
library(leo.gwas)
detach("package:leo.gwas", unload = TRUE)
