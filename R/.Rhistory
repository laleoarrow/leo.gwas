?trimws
gc()
vector_x <- c(10, 2, 3, 4, 5)
vector_y <- c(5, 6, 7, 8, 7)
#' @param point_stroke It could also be NA!!!
#'
#' @return A ggplot object representing the scatter plot with correlation information.
#' @export
#' @seealso \code{\link{correlation_calculate}} for calculating correlation coefficients and p-values.
#' @seealso [leo_scale_color()] for applying color palettes to ggplot objects.
#' @examples
#' vector_x <- c(10, 2, 3, 4, 5)
#' vector_y <- c(5, 6, 7, 8, 7)
#' correlation_draw(vector_x, vector_y, method = "pearson", point_size = 10, color_palette = "npg")
correlation_draw <- function(vector_x, vector_y, method = "spearman", color_palette = "npg",
title = "Correlation Plot", xlab = "Vector X", ylab = "Vector Y",
point_size = 1.5, point_color = "#BB7CD8", point_stroke = 1, alpha = 0.75,
line_color = "#BB7CD8", line_type = "dashed", line_size = 1.2,
ci_alpha = 0.2, title_size = 16, xlab_size = 14,
ylab_size = 14, axis_text_size = 14, ...) {
# Calculate correlation
correlation_result <- correlation_calculate(vector_x, vector_y, method = method, ...)
correlation_coefficient <- round(correlation_result$correlation_coefficient, 3)
p_value <- round(correlation_result$p_value, 3)
# Create scatter plot with correlation coefficient and p-value annotation
plot <- ggplot2::ggplot(data = data.frame(vector_x, vector_y), ggplot2::aes(x = vector_x, y = vector_y)) +
ggplot2::geom_point(size = point_size, color = "black", fill = point_color, alpha = alpha, stroke = point_stroke, shape = 21) +
ggplot2::geom_smooth(method = "lm", color = line_color, linetype = line_type,
size = line_size, se = TRUE, fill = line_color, alpha = ci_alpha) +  # Add confidence interval shading
ggplot2::labs(title = title, x = xlab, y = ylab) +
ggplot2::annotate(
"text", x = Inf, y = Inf,
label = paste("Correlation:", correlation_coefficient, "\nP-value:", p_value),
hjust = 1.1, vjust = 1.2,
size = 5, color = "black"
) +
ggplot2::theme_classic() +
ggplot2::theme(
plot.title = ggplot2::element_text(size = title_size),
axis.text = ggplot2::element_text(size = axis_text_size, color = "black"),
axis.title.x = ggplot2::element_text(size = xlab_size, color = "black"),
axis.title.y = ggplot2::element_text(size = ylab_size, color = "black"),
axis.line = ggplot2::element_line(color = "black"),      # Set axis line color
axis.ticks = ggplot2::element_line(color = "black"),     # Set axis ticks color
panel.grid = ggplot2::element_blank()                    # Remove grid
)
# Apply color palette using the helper function
# plot <- leo_scale_color(plot, color_palette)
return(plot)
}
correlation_draw(vector_x, vector_y, method = "pearson", point_size = 10, color_palette = "npg")
correlation_calculate <- function(vector_x, vector_y, method = "spearman", ...) {
if (!method %in% c("spearman", "pearson")) {
stop("Invalid method. Choose 'spearman' or 'pearson'.")
}
# Remove NA values from both vectors consistently
valid_indices <- complete.cases(vector_x, vector_y)
vector_x <- vector_x[valid_indices]
vector_y <- vector_y[valid_indices]
# Use cor.test to get correlation coefficient and p-value
correlation_test <- cor.test(vector_x, vector_y, method = method, use = "complete.obs", ...)
# Extract correlation coefficient and p-value
result <- data.frame(
correlation_coefficient = as.numeric(correlation_test$estimate),
p_value = correlation_test$p.value
)
#' @param point_stroke It could also be NA!!!
#'
#' @return A ggplot object representing the scatter plot with correlation information.
#' @export
#' @seealso \code{\link{correlation_calculate}} for calculating correlation coefficients and p-values.
#' @seealso [leo_scale_color()] for applying color palettes to ggplot objects.
#' @examples
#' vector_x <- c(10, 2, 3, 4, 5)
#' vector_y <- c(5, 6, 7, 8, 7)
#' correlation_draw(vector_x, vector_y, method = "pearson", point_size = 10, color_palette = "npg")
correlation_draw <- function(vector_x, vector_y, method = "spearman", color_palette = "npg",
title = "Correlation Plot", xlab = "Vector X", ylab = "Vector Y",
point_size = 1.5, point_color = "#BB7CD8", point_stroke = 1, alpha = 0.75,
line_color = "#BB7CD8", line_type = "dashed", line_size = 1.2,
ci_alpha = 0.2, title_size = 16, xlab_size = 14,
ylab_size = 14, axis_text_size = 14, ...) {
# Calculate correlation
correlation_result <- correlation_calculate(vector_x, vector_y, method = method, ...)
correlation_coefficient <- round(correlation_result$correlation_coefficient, 3)
p_value <- round(correlation_result$p_value, 3)
# Create scatter plot with correlation coefficient and p-value annotation
plot <- ggplot2::ggplot(data = data.frame(vector_x, vector_y), ggplot2::aes(x = vector_x, y = vector_y)) +
ggplot2::geom_point(size = point_size, color = "black", fill = point_color, alpha = alpha, stroke = point_stroke, shape = 21) +
ggplot2::geom_smooth(method = "lm", color = line_color, linetype = line_type,
size = line_size, se = TRUE, fill = line_color, alpha = ci_alpha) +  # Add confidence interval shading
ggplot2::labs(title = title, x = xlab, y = ylab) +
ggplot2::annotate(
"text", x = Inf, y = Inf,
label = paste("Correlation:", correlation_coefficient, "\nP-value:", p_value),
hjust = 1.1, vjust = 1.2,
size = 5, color = "black"
) +
ggplot2::theme_classic() +
ggplot2::theme(
plot.title = ggplot2::element_text(size = title_size),
axis.text = ggplot2::element_text(size = axis_text_size, color = "black"),
axis.title.x = ggplot2::element_text(size = xlab_size, color = "black"),
axis.title.y = ggplot2::element_text(size = ylab_size, color = "black"),
axis.line = ggplot2::element_line(color = "black"),      # Set axis line color
axis.ticks = ggplot2::element_line(color = "black"),     # Set axis ticks color
panel.grid = ggplot2::element_blank()                    # Remove grid
)
# Apply color palette using the helper function
# plot <- leo_scale_color(plot, color_palette)
return(plot)
}
correlation_draw(vector_x, vector_y, method = "pearson", point_size = 10, color_palette = "npg")
#' @param point_stroke It could also be NA!!!
#'
#' @return A ggplot object representing the scatter plot with correlation information.
#' @export
#' @seealso \code{\link{correlation_calculate}} for calculating correlation coefficients and p-values.
#' @seealso [leo_scale_color()] for applying color palettes to ggplot objects.
#' @examples
#' vector_x <- c(10, 2, 3, 4, 5)
#' vector_y <- c(5, 6, 7, 8, 7)
#' correlation_draw(vector_x, vector_y, method = "pearson", point_size = 10, color_palette = "npg")
correlation_draw <- function(vector_x, vector_y, method = "spearman", color_palette = "npg",
title = "Correlation Plot", xlab = "Vector X", ylab = "Vector Y",
point_size = 1.5, point_color = "#BB7CD8", point_stroke = 1, alpha = 0.75,
line_color = "#BB7CD8", line_type = "dashed", line_size = 1.2,
ci_alpha = 0.2, title_size = 16, xlab_size = 14,
ylab_size = 14, axis_text_size = 14, ...) {
# Calculate correlation
correlation_result <- correlation_calculate(vector_x, vector_y, method = method, ...)
correlation_coefficient <- round(correlation_result$correlation_coefficient, 3)
p_value <- round(correlation_result$p_value, 3)
# Create scatter plot with correlation coefficient and p-value annotation
plot <- ggplot2::ggplot(data = data.frame(vector_x, vector_y), ggplot2::aes(x = vector_x, y = vector_y)) +
ggplot2::geom_point(size = point_size, color = "black", fill = point_color, alpha = alpha, stroke = point_stroke, shape = 21) +
ggplot2::geom_smooth(method = "lm", color = line_color, linetype = line_type,
size = line_size, se = TRUE, fill = line_color, alpha = ci_alpha) +  # Add confidence interval shading
ggplot2::labs(title = title, x = xlab, y = ylab) +
ggplot2::annotate(
"text", x = Inf, y = Inf,
label = paste("Correlation:", correlation_coefficient, "\nP-value:", p_value),
hjust = 1.1, vjust = 1.2,
size = 5, color = "black"
) +
ggplot2::theme_classic() +
ggplot2::theme(
plot.title = ggplot2::element_text(size = title_size),
axis.text = ggplot2::element_text(size = axis_text_size, color = "black"),
axis.title.x = ggplot2::element_text(size = xlab_size, color = "black"),
axis.title.y = ggplot2::element_text(size = ylab_size, color = "black"),
axis.line = ggplot2::element_line(color = "black"),      # Set axis line color
axis.ticks = ggplot2::element_line(color = "black"),     # Set axis ticks color
panel.grid = ggplot2::element_blank()                    # Remove grid
)
# Apply color palette using the helper function
# plot <- leo_scale_color(plot, color_palette)
return(plot)
}
correlation_draw(vector_x, vector_y, method = "pearson", point_size = 10, color_palette = "npg")
#' #'               Defaults to "spearman".
#' #' @param ... Pass to \code{\link[stats]{cor.test}}.
#' #'
#' #' @return A list with the correlation coefficient and p-value.
#' #' @export
#' #' @seealso \code{\link{correlation_draw}} for plotting correlation results.
#' #' @examples
#' #' vector_x <- c(1, 2, 3, 4, 5)
#' #' vector_y <- c(5, 6, 7, 8, 7)
#' #' result <- correlation_calculate(vector_x, vector_y, method = "pearson")
correlation_calculate <- function(vector_x, vector_y, method = "spearman", ...) {
if (!method %in% c("spearman", "pearson")) {
stop("Invalid method. Choose 'spearman' or 'pearson'.")
}
# Remove NA values from both vectors consistently
valid_indices <- complete.cases(vector_x, vector_y)
vector_x <- vector_x[valid_indices]
vector_y <- vector_y[valid_indices]
# Use cor.test to get correlation coefficient and p-value
correlation_test <- cor.test(vector_x, vector_y, method = method, use = "complete.obs", ...)
# Extract correlation coefficient and p-value
result <- data.frame(
correlation_coefficient = as.numeric(correlation_test$estimate),
p_value = correlation_test$p.value
)
return(result)
}
correlation_draw(vector_x, vector_y, method = "pearson", point_size = 10, color_palette = "npg")
